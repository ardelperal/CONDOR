### **PROMPT PARA COPILOT**

**Misión de Refactorización Integral: Estabilización de la Funcionalidad 'Document'**

**Contexto:**
La funcionalidad de gestión de documentos sufre de errores críticos de compilación y violaciones de nuestros patrones de diseño. Tu misión es ejecutar una refactorización completa para corregir la nomenclatura de tipos y estandarizar la factoría del servicio.

**Plan de Acción Detallado:**

**Paso 1: Corregir Nomenclatura de `ESolicitud` a `Solicitud` (Prioridad #1)**

El tipo de dato `ESolicitud` es obsoleto y debe ser reemplazado por `Solicitud` en toda la funcionalidad.

1.  Abre `IDocumentService.cls`. Modifica la firma de `GenerarDocumento` para que acepte `ByVal solicitud As Solicitud`.
2.  Abre `CDocumentService.cls`. Realiza los siguientes cambios:
    *   Modifica la firma de `IDocumentService_GenerarDocumento` para que acepte `ByVal solicitud As Solicitud`.
    *   Modifica la firma del método público de conveniencia `GenerarDocumento` para que acepte `ByVal solicitud As Solicitud`.
    *   Modifica la firma de `IDocumentService_LeerDocumento` para que la variable `solicitudLeida` sea de tipo `Solicitud`.
    *   Modifica la firma de `ReemplazarCamposEnPlantilla` para que acepte `ByVal solicitud As Solicitud`.
3.  Abre `CMockDocumentService.cls`. Realiza los siguientes cambios:
    *   Modifica el tipo de la variable `GenerarDocumento_LastSolicitud` a `Solicitud`.
    *   Modifica la firma de `IDocumentService_GenerarDocumento` para que acepte `ByVal solicitud As Solicitud`.
    *   Modifica la firma del método público de conveniencia `GenerarDocumento` para que acepte `ByVal solicitud As Solicitud`.
4.  Abre `ISolicitudRepository.cls`.
    *   Modifica la firma de `GetSolicitudById` para que devuelva `As Solicitud`.
    *   Modifica la firma de `SaveSolicitud` para que acepte `ByVal solicitud As Solicitud`.

**Paso 2: Estandarizar `modDocumentServiceFactory` (Lección 37)**

La factoría debe tener cero argumentos y llamar a otras factorías sin pasarles parámetros.

1.  Abre `modDocumentServiceFactory.bas`.
2.  Modifica la firma de `CreateDocumentService` para que no acepte ningún argumento.
    *   **Incorrecto:** `Public Function CreateDocumentService(Optional ByVal testConfig As IConfig = Nothing) As IDocumentService`
    *   **Correcto:** `Public Function CreateDocumentService() As IDocumentService`
3.  Elimina toda la lógica condicional relacionada con `testConfig`. La creación de `configService` debe ser una llamada directa: `Set configService = modConfigFactory.CreateConfigService()`.
4.  Modifica las llamadas a `modRepositoryFactory` para que no pasen argumentos.
    *   **Incorrecto:** `Set mapeoRepository = modRepositoryFactory.CreateMapeoRepository(configService, errorHandler)`
    *   **Correcto:** `Set mapeoRepository = modRepositoryFactory.CreateMapeoRepository()`
5.  Aplica la corrección del punto anterior a las llamadas `CreateSolicitudRepository` también.

**Paso 3: Alinear la Prueba de Integración con los Cambios**

1.  Abre `IntegrationTestDocumentService.bas`.
2.  Dentro de la función `InitializeRealDependencies`, localiza las llamadas a `modRepositoryFactory`.
3.  Modifícalas para que no pasen argumentos, de acuerdo con la corrección del Paso 2.
    *   **Incorrecto:** `Set m_MapeoRepo = modRepositoryFactory.CreateMapeoRepository(m_Config, m_ErrorHandler)`
    *   **Correcto:** `Set m_MapeoRepo = modRepositoryFactory.CreateMapeoRepository()`
4.  Aplica la misma corrección a `CreateSolicitudRepository` y `CreateExpedienteRepository`.
5.  Modifica la llamada a `CreateDocumentService` para que no pase argumentos: `Set m_DocumentService = modDocumentServiceFactory.CreateDocumentService()`.

**Tarea de Sincronización Obligatoria (Lección 38):**
Una vez completadas todas las correcciones, sincroniza la documentación.
1.  **Sincronizar `CONDOR_MASTER_PLAN.md`**:
    *   Abre `CONDOR_MASTER_PLAN.md`.
    *   Navega a la sección **3.5. Gestión de Documentos**.
    *   Regenera la lista de ficheros y el diagrama de clases UML (Mermaid). El diagrama debe reflejar el tipo de dato `Solicitud` y las nuevas interacciones de la factoría `modDocumentServiceFactory` (llamando a las otras factorías sin argumentos).
2.  **Sincronizar `condor_cli.vbs`**:
    *   Abre `condor_cli.vbs` y, en `GetFunctionalityFiles`, verifica que bajo `Case "document"` estén todos los ficheros de esta funcionalidad.

**Ciclo de Trabajo de Estabilización (Lección 4):**
Tras completar todas las modificaciones y la sincronización, ejecuta el último comando.

`cscript //nologo condor_cli.vbs rebuild`

**PAUSA OBLIGATORIA:** A continuación, el Supervisor abrirá el proyecto en Microsoft Access y ejecutará **Depuración -> Compilar Proyecto**. No se realizarán más acciones hasta recibir la confirmación de una compilación exitosa.